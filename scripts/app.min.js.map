{"version":3,"sources":["node_modules/browser-pack/_prelude.js","scripts/app.js","scripts/constants.js","scripts/setColors.js","scripts/setSound.js","scripts/eventListeners.js"],"names":["getAudioContext","window","AudioContext","webkitAudioContext","downEvent","event","mousedown","oscillator","context","createOscillator","gain","_setSound","calculateSoundGain","pageY","lightValue","_setColors","calculateLightValue","frequencyPercentage","findFrequencyPercentage","frequency","value","setTargetAtTime","calculateFrequency","pageX","currentTime","connect","gainNode","destination","start","setColors","upEvent","stop","disconnect","moveEvent","preventDefault","require","_eventListeners","setupListeners","createGain","FREQ","exports","min","max","GAIN","COLOR_RANGE","hue","light","setBackgroundColor","setHeadingColor","mouseYPosition","innerHeight","_constants","freq","freqRange","huePercent","lightPercent","Math","round","backgroundColor","document","body","style","heading","getElementById","hueOpposite","lightOpposite","headingColor","color","expInterpolate","n","exp","log","mouseXPosition","innerWidth","isTouchDevice","addEventListener","navigator","MaxTouchPoints","msMaxTouchPoints"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { \n    calculateFrequency, \n    calculateSoundGain \n} from \"./setSound\";\n\nimport { \n    setColors,\n    findFrequencyPercentage,\n    calculateLightValue \n} from \"./setColors\";\n\nimport { setupListeners } from \"./eventListeners\";\n\n\n//Determine what AudioContext is available to use\nvar context = getAudioContext();\n\nfunction getAudioContext() {\n    if(\"AudioContext\" in window) {\n        return new window.AudioContext();\n    } else if(\"webkitAudioContext\" in window) {\n        return new window.webkitAudioContext();\n    }\n}\n\n//sets event listeners based on touch or non-touch device\nsetupListeners(downEvent, upEvent, moveEvent);\n\n//event functions\nvar mousedown = false,\n    oscillator = null,\n    gainNode = context.createGain();\n\nfunction downEvent(event) {\n    mousedown = true;\n    oscillator = context.createOscillator();\n\n    var gain = calculateSoundGain(event.pageY),\n        lightValue = calculateLightValue(event.pageY),   \n        frequencyPercentage = findFrequencyPercentage(oscillator.frequency.value); \n    \n\n    oscillator.frequency.setTargetAtTime(calculateFrequency(event.pageX), context.currentTime, 0.01);\n    oscillator.connect(gainNode);\n    \n    gainNode.connect(context.destination);\n    gainNode.gain.setTargetAtTime(gain, context.currentTime, 0.01);\n    \n    oscillator.start(context.currentTime);\n    \n    setColors(frequencyPercentage, lightValue);   \n}\n\nfunction upEvent() {\n    if(oscillator) {\n        mousedown = false;\n        oscillator.stop(context.currentTime);\n        oscillator.disconnect();\n    } \n}\n\nfunction moveEvent(event) {\n    event.preventDefault();\n    if(mousedown) {\n        var gain = calculateSoundGain(event.pageY),\n            lightValue = calculateLightValue(event.pageY),\n            frequencyPercentage = findFrequencyPercentage(oscillator.frequency.value);    \n        \n        oscillator.frequency.setTargetAtTime(calculateFrequency(event.pageX), context.currentTime, 0.01);\n        \n        gainNode.gain.setTargetAtTime(gain, context.currentTime, 0.01); \n        \n        setColors(frequencyPercentage, lightValue);           \n    }\n}","export const FREQ = {\n    min: 60, \n    max: 2000\n};\n\nexport const GAIN = {\n    min: 0.01,\n    max: 1\n};\n\nexport const COLOR_RANGE = 360;","import { FREQ, GAIN, COLOR_RANGE } from \"./constants\";\n\nexport function setColors(hue, light) {\n    setBackgroundColor(hue, light);\n    setHeadingColor(hue, light);\n}\n\nexport function calculateLightValue(mouseYPosition) {\n    return 1 - ((mouseYPosition / window.innerHeight) * GAIN.max);\n}\n\nexport function findFrequencyPercentage(freq) {\n    var freqRange = FREQ.max - FREQ.min;\n    return (freq / freqRange);\n}\n\nfunction setBackgroundColor(huePercent, lightPercent) {\n    var hue = Math.min(360, Math.round(COLOR_RANGE * huePercent)), \n        light = (70 * lightPercent) + 10, \n        backgroundColor = \"hsla(\" + hue + \", 50%, \" + light + \"%, 1)\";\n\n    document.body.style.backgroundColor = backgroundColor;\n}\n\nfunction setHeadingColor(huePercent, lightPercent) {\n    var heading = document.getElementById(\"heading\"),\n        hue = Math.min(360, Math.round(COLOR_RANGE * huePercent)),\n        hueOpposite = (hue + 180) % 360,\n        lightOpposite = (70 * lightPercent) + 10,\n        headingColor = \"hsla(\" + hueOpposite + \", 50%, \" + lightOpposite + \"%, 1)\";\n\n    if(lightPercent < 0.50) {\n        heading.style.backgroundColor = \"hsla(0, 100%, 100%, 0.75)\";\n    } else {\n        heading.style.backgroundColor = \"hsla(0, 0%, 0%, 0.75)\";\n    }\n\n    heading.style.color = headingColor;\n}","import { FREQ, GAIN } from \"./constants\";\n\nfunction expInterpolate(n, min, max) {\n    return Math.exp(n * Math.log(max / min)) * min;\n}\n\nexport function calculateFrequency(mouseXPosition) {\n    return expInterpolate(mouseXPosition / window.innerWidth, FREQ.min, FREQ.max);\n}\n\nexport function calculateSoundGain(mouseYPosition) {\n    return expInterpolate(1 - (mouseYPosition / window.innerHeight), GAIN.min, GAIN.max);\n}","export function setupListeners(downEvent, upEvent, moveEvent) {\n    if(isTouchDevice()) {\n        document.body.addEventListener(\"touchstart\", downEvent);\n        document.body.addEventListener(\"touchend\", upEvent);\n        document.body.addEventListener(\"touchmove\", moveEvent);\n    } else {\n        document.body.addEventListener(\"mousedown\", downEvent);\n        document.body.addEventListener(\"mouseup\", upEvent);\n        document.body.addEventListener(\"mousemove\", moveEvent);\n    }\n} \n\nfunction isTouchDevice() {\n    return ((\"ontouchstart\" in window)\n        || (navigator.MaxTouchPoints > 0)\n        || (navigator.msMaxTouchPoints > 0));\n}"]}